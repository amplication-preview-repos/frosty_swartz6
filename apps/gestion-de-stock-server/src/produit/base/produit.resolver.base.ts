/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Produit } from "./Produit";
import { ProduitCountArgs } from "./ProduitCountArgs";
import { ProduitFindManyArgs } from "./ProduitFindManyArgs";
import { ProduitFindUniqueArgs } from "./ProduitFindUniqueArgs";
import { CreateProduitArgs } from "./CreateProduitArgs";
import { UpdateProduitArgs } from "./UpdateProduitArgs";
import { DeleteProduitArgs } from "./DeleteProduitArgs";
import { StockFindManyArgs } from "../../stock/base/StockFindManyArgs";
import { Stock } from "../../stock/base/Stock";
import { VenteFindManyArgs } from "../../vente/base/VenteFindManyArgs";
import { Vente } from "../../vente/base/Vente";
import { ProduitService } from "../produit.service";
@graphql.Resolver(() => Produit)
export class ProduitResolverBase {
  constructor(protected readonly service: ProduitService) {}

  async _produitsMeta(
    @graphql.Args() args: ProduitCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Produit])
  async produits(
    @graphql.Args() args: ProduitFindManyArgs
  ): Promise<Produit[]> {
    return this.service.produits(args);
  }

  @graphql.Query(() => Produit, { nullable: true })
  async produit(
    @graphql.Args() args: ProduitFindUniqueArgs
  ): Promise<Produit | null> {
    const result = await this.service.produit(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Produit)
  async createProduit(
    @graphql.Args() args: CreateProduitArgs
  ): Promise<Produit> {
    return await this.service.createProduit({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Produit)
  async updateProduit(
    @graphql.Args() args: UpdateProduitArgs
  ): Promise<Produit | null> {
    try {
      return await this.service.updateProduit({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Produit)
  async deleteProduit(
    @graphql.Args() args: DeleteProduitArgs
  ): Promise<Produit | null> {
    try {
      return await this.service.deleteProduit(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Stock], { name: "stocks" })
  async findStocks(
    @graphql.Parent() parent: Produit,
    @graphql.Args() args: StockFindManyArgs
  ): Promise<Stock[]> {
    const results = await this.service.findStocks(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Vente], { name: "ventes" })
  async findVentes(
    @graphql.Parent() parent: Produit,
    @graphql.Args() args: VenteFindManyArgs
  ): Promise<Vente[]> {
    const results = await this.service.findVentes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
