/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { VenteService } from "../vente.service";
import { VenteCreateInput } from "./VenteCreateInput";
import { Vente } from "./Vente";
import { VenteFindManyArgs } from "./VenteFindManyArgs";
import { VenteWhereUniqueInput } from "./VenteWhereUniqueInput";
import { VenteUpdateInput } from "./VenteUpdateInput";
import { FactureFindManyArgs } from "../../facture/base/FactureFindManyArgs";
import { Facture } from "../../facture/base/Facture";
import { FactureWhereUniqueInput } from "../../facture/base/FactureWhereUniqueInput";

export class VenteControllerBase {
  constructor(protected readonly service: VenteService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Vente })
  async createVente(@common.Body() data: VenteCreateInput): Promise<Vente> {
    return await this.service.createVente({
      data: {
        ...data,

        produit: data.produit
          ? {
              connect: data.produit,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        date: true,
        id: true,

        produit: {
          select: {
            id: true,
          },
        },

        quantit: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Vente] })
  @ApiNestedQuery(VenteFindManyArgs)
  async ventes(@common.Req() request: Request): Promise<Vente[]> {
    const args = plainToClass(VenteFindManyArgs, request.query);
    return this.service.ventes({
      ...args,
      select: {
        createdAt: true,
        date: true,
        id: true,

        produit: {
          select: {
            id: true,
          },
        },

        quantit: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Vente })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async vente(
    @common.Param() params: VenteWhereUniqueInput
  ): Promise<Vente | null> {
    const result = await this.service.vente({
      where: params,
      select: {
        createdAt: true,
        date: true,
        id: true,

        produit: {
          select: {
            id: true,
          },
        },

        quantit: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Vente })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateVente(
    @common.Param() params: VenteWhereUniqueInput,
    @common.Body() data: VenteUpdateInput
  ): Promise<Vente | null> {
    try {
      return await this.service.updateVente({
        where: params,
        data: {
          ...data,

          produit: data.produit
            ? {
                connect: data.produit,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          date: true,
          id: true,

          produit: {
            select: {
              id: true,
            },
          },

          quantit: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Vente })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteVente(
    @common.Param() params: VenteWhereUniqueInput
  ): Promise<Vente | null> {
    try {
      return await this.service.deleteVente({
        where: params,
        select: {
          createdAt: true,
          date: true,
          id: true,

          produit: {
            select: {
              id: true,
            },
          },

          quantit: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/factures")
  @ApiNestedQuery(FactureFindManyArgs)
  async findFactures(
    @common.Req() request: Request,
    @common.Param() params: VenteWhereUniqueInput
  ): Promise<Facture[]> {
    const query = plainToClass(FactureFindManyArgs, request.query);
    const results = await this.service.findFactures(params.id, {
      ...query,
      select: {
        createdAt: true,
        date: true,
        id: true,
        montantTotale: true,
        updatedAt: true,

        vente: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/factures")
  async connectFactures(
    @common.Param() params: VenteWhereUniqueInput,
    @common.Body() body: FactureWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      factures: {
        connect: body,
      },
    };
    await this.service.updateVente({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/factures")
  async updateFactures(
    @common.Param() params: VenteWhereUniqueInput,
    @common.Body() body: FactureWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      factures: {
        set: body,
      },
    };
    await this.service.updateVente({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/factures")
  async disconnectFactures(
    @common.Param() params: VenteWhereUniqueInput,
    @common.Body() body: FactureWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      factures: {
        disconnect: body,
      },
    };
    await this.service.updateVente({
      where: params,
      data,
      select: { id: true },
    });
  }
}
